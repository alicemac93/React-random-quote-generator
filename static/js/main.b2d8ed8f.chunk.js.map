{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["getQ","a","fetch","response","ok","json","jsonResponse","console","log","RandomQuote","useState","text","author","quote","setQuote","className","onClick","then","random","Math","floor","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAWMA,G,MAAI,uCAAG,8BAAAC,EAAA,+EAEkBC,MAAM,+BAFxB,YAECC,EAFD,QAGQC,GAHR,gCAI0BD,EAASE,OAJnC,cAIKC,EAJL,yBAKMA,GALN,yDAOQC,QAAQC,IAAR,MAPR,0DAAH,sDAqCKC,MA3Bf,WAAuB,IAAD,EACQC,mBAAS,CAC/BC,KAAM,oBACNC,OAAQ,YAHM,mBACXC,EADW,KACJC,EADI,KAelB,OAEH,sBAAKC,UAAU,kBAAkBC,QAXV,WAChBhB,IAAOiB,MAAK,SAAAJ,GACZ,IAAMK,EAASC,KAAKC,MAAMD,KAAKD,SAAWL,EAAMQ,QAChDP,EAAS,CACLH,KAAME,EAAMK,GAAQP,KACpBC,OAAQC,EAAMK,GAAQN,aAMjC,UACO,mBAAGG,UAAU,OAAb,SAAqBF,EAAMF,OAC3B,mBAAGI,UAAU,SAAb,SAAuBF,EAAMD,SAC7B,mBAAGG,UAAU,cAAb,+CC7BOO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b2d8ed8f.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport \"./App.css\";\n\n/*\nconst getQuotes = fetch(\"https://type.fit/api/quotes\")\n  .then((response) => response.json())\n  .then(data => console.log(data))\n  .catch(err => console.log(err));\nsame as async below \n  */\n\nconst getQ = async() =>Â {\n    try {\n        const response = await fetch(\"https://type.fit/api/quotes\");\n        if (response.ok) {\n            const jsonResponse = await response.json();\n            return jsonResponse\n        }\n    } catch (error) {console.log(error)}\n}\n\nfunction RandomQuote(){\n    const [quote, setQuote] = useState({\n        text: \"this is the quote\",\n        author: \"unknown\"\n    })\n\n    const createQuote = () => {\n        getQ().then(quote => {\n        const random = Math.floor(Math.random() * quote.length)\n        setQuote({\n            text: quote[random].text,\n            author: quote[random].author})\n    })\n    }\n\n    return (\n \n <div className=\"quote-container\" onClick={createQuote}>\n        <q className=\"text\">{quote.text}</q>\n        <p className=\"author\">{quote.author}</p>\n        <p className=\"description\">* Click me to show next quote</p>\n    </div>\n)\n}\n\n\n\nexport default RandomQuote;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RandomQuote from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RandomQuote />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}